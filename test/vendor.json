[
  {
    "package": "elysia",
    "repository": "https://github.com/elysiajs/elysia",
    "tag": "1.1.24"
  },
  {
    "package": "koa",
    "repository": "https://github.com/koajs/koa",
    "tag": "2.16.1",
    "testPatterns": [
      "__tests__/*.test.js"
    ],
    "testFailures": [
      "__tests__/application/onerror.test.js > app.onerror(err) > should do nothing if .silent",
      "__tests__/application/onerror.test.js > app.onerror(err) > should do nothing if status is 404",
      "__tests__/application/onerror.test.js > app.onerror(err) > should log the error to stderr",
      "__tests__/application/respond.test.js > app.respond > when .body is missing > with custom status=700 > should respond with the associated status message",
      "__tests__/application/respond.test.js > app.respond > when status and body property > should 204",
      "__tests__/application/respond.test.js > segmentation fault",
      "__tests__/application/response.test.js > app.response > should not include status message in body for http2",
      "__tests__/context/onerror.test.js > ctx.onerror(err) > should unset all headers",
      "__tests__/context/onerror.test.js > timeout",
      "__tests__/response/status.test.js > res.status= > when 204 > should strip content related header fields",
      "__tests__/response/status.test.js > res.status= > when 204 > should strip content related header fields after status set",
      "__tests__/response/status.test.js > res.status= > when 205 > should strip content related header fields",
      "__tests__/response/status.test.js > res.status= > when 205 > should strip content related header fields after status set",
      "__tests__/response/status.test.js > res.status= > when 304 > should strip content related header fields",
      "__tests__/response/status.test.js > res.status= > when 304 > should strip content related header fields after status set"
    ]
  },
  {
    "package": "express",
    "repository": "https://github.com/expressjs/express",
    "tag": "5.1.0",
    "testPatterns": [
      "test/*.js",
      "test/acceptance/*.js"
    ],
    "testFailures": [
      "test/Route.js > Route > should not stack overflow with a large sync stack",
      "test/Router.js > Router > should not stack overflow with a large sync middleware stack",
      "test/Router.js > Router > should not stack overflow with a large sync route stack",
      "test/Router.js > Router > should not stack overflow with many registered routes",
      "test/acceptance/downloads.js > downloads > GET /files/../index.js > should respond with 403",
      "test/acceptance/downloads.js > downloads > GET /files/../index.js > should respond with 403",
      "test/app.js > code 3",
      "test/app.options.js > OPTIONS > when error occurs in response handler > should pass error to callback",
      "test/app.router.js > app.router > methods > should include GET",
      "test/app.router.js > app.router > methods > should include PUT",
      "test/express.json.js > express.json() > should handle empty message-body",
      "test/express.raw.js > code 1",
      "test/express.static.js > code 13",
      "test/express.text.js > code 1",
      "test/express.urlencoded.js > code 1",
      "test/middleware.basic.js > middleware > .next() > should behave like connect",
      "test/req.xhr.js > code 1",
      "test/res.location.js > res > .location(url) > should consistently handle empty string input",
      "test/res.location.js > res > .location(url) > should consistently handle non-string inputs: array",
      "test/res.send.js > res > when .statusCode is 204 > should strip Content-* fields, Transfer-Encoding field, and body",
      "test/res.send.js > res > when .statusCode is 304 > should strip Content-* fields, Transfer-Encoding field, and body",
      "test/res.sendFile.js > res > .sendFile(path) > should not error if the client aborts",
      "test/res.sendFile.js > timeout",
      "test/res.set.js > res > .set(field, values) > should coerce to an array of strings",
      "test/res.status.js > res > .status(code) > accept valid ranges > should set the response status code to 700",
      "test/res.status.js > res > .status(code) > accept valid ranges > should set the response status code to 800",
      "test/res.status.js > res > .status(code) > accept valid ranges > should set the response status code to 900"
    ]
  },
  {
    "package": "hono",
    "repository": "https://github.com/honojs/hono",
    "tag": "v4.7.6",
    "testPatterns": [
      "src/*.test.ts",
      "runtime-tests/bun/*.test.tsx"
    ],
    "testFailures": [
      "src/adapter/bun/websocket.test.ts > createBunWebSocket() > Should events are called",
      "src/adapter/bun/websocket.test.ts > createWSContext() > Should send() and close() works",
      "src/adapter/bun/websocket.test.ts > upgradeWebSocket() > Should throw error when server is null",
      "src/adapter/cloudflare-pages/handler.test.ts > Adapter for Cloudflare Pages > Should not use `basePath()` if path argument is not passed",
      "src/adapter/cloudflare-pages/handler.test.ts > Adapter for Cloudflare Pages > Should return 200 response",
      "src/adapter/cloudflare-pages/handler.test.ts > Middleware adapter for Cloudflare Pages > Should handle a HTTPException by returning error.getResponse()",
      "src/adapter/cloudflare-pages/handler.test.ts > Middleware adapter for Cloudflare Pages > Should handle a non-Error thrown by next()",
      "src/adapter/cloudflare-pages/handler.test.ts > Middleware adapter for Cloudflare Pages > Should handle an Error thrown by next()",
      "src/adapter/cloudflare-pages/handler.test.ts > Middleware adapter for Cloudflare Pages > Should handle an HTTPException thrown by next()",
      "src/adapter/cloudflare-pages/handler.test.ts > Middleware adapter for Cloudflare Pages > Should rethrow an Error",
      "src/adapter/cloudflare-pages/handler.test.ts > Middleware adapter for Cloudflare Pages > Should rethrow non-Error exceptions",
      "src/adapter/cloudflare-pages/handler.test.ts > Middleware adapter for Cloudflare Pages > Should return the Pages response if the middleware does not return a response",
      "src/adapter/cloudflare-pages/handler.test.ts > Middleware adapter for Cloudflare Pages > Should return the middleware response",
      "src/adapter/cloudflare-pages/handler.test.ts > Middleware adapter for Cloudflare Pages > Should return the middleware response if next() is not called",
      "src/adapter/cloudflare-pages/handler.test.ts > Middleware adapter for Cloudflare Pages > Should return the middleware response when exceptions are handled",
      "src/adapter/cloudflare-pages/handler.test.ts > Middleware adapter for Cloudflare Pages > Should set the data in eventContext.data",
      "src/adapter/cloudflare-pages/handler.test.ts > serveStatic() > Should pass the raw request to ASSETS.fetch",
      "src/adapter/cloudflare-pages/handler.test.ts > serveStatic() > Should respond with 404 if ASSETS.fetch returns a 404 response",
      "src/adapter/cloudflare-workers/serve-static.test.ts > code 1",
      "src/adapter/cloudflare-workers/websocket.test.ts > upgradeWebSocket middleware > Should call next() when header does not have upgrade",
      "src/adapter/deno/websocket.test.ts > WebSockets > Should call next() when header does not have upgrade",
      "src/adapter/lambda-edge/handler.test.ts > code 3",
      "src/adapter/service-worker/handler.test.ts > ✗ ",
      "src/context.test.ts > Context > c.notFound()",
      "src/context.test.ts > Context header > Should be able to overwrite a fetch response with a new response.",
      "src/context.test.ts > Context header > Should be able to overwrite a response with a fetch response.",
      "src/context.test.ts > event and executionCtx > Should return the event if accessing c.event",
      "src/context.test.ts > event and executionCtx > Should return the executionCtx if accessing c.executionCtx",
      "src/helper/adapter/index.test.ts > getRuntimeKey > Should return the current runtime key",
      "src/helper/dev/index.test.ts > ✗ ",
      "src/helper/proxy/index.test.ts > Proxy Middleware > proxy > POST request",
      "src/helper/proxy/index.test.ts > Proxy Middleware > proxy > client disconnect",
      "src/helper/proxy/index.test.ts > Proxy Middleware > proxy > compressed",
      "src/helper/proxy/index.test.ts > Proxy Middleware > proxy > does not propagate undefined request headers",
      "src/helper/proxy/index.test.ts > Proxy Middleware > proxy > modify header",
      "src/helper/proxy/index.test.ts > Proxy Middleware > proxy > not found",
      "src/helper/proxy/index.test.ts > Proxy Middleware > proxy > remove hop-by-hop headers",
      "src/helper/proxy/index.test.ts > Proxy Middleware > proxy > specify hop-by-hop header by options",
      "src/helper/proxy/index.test.ts > Proxy Middleware > proxy > uncompressed",
      "src/helper/proxy/index.test.ts > ✗ ",
      "src/helper/streaming/stream.test.ts > Basic Streaming Helper > Check stream Response if aborted by abort signal",
      "src/helper/streaming/stream.test.ts > Basic Streaming Helper > Check stream Response if error occurred",
      "src/helper/streaming/stream.test.ts > Basic Streaming Helper > Check stream Response if pipe is aborted by abort signal",
      "src/helper/testing/index.test.ts > hono testClient > Should not throw an error with $ws()",
      "src/helper/websocket/index.test.ts > defineWebSocketHelper > When response is undefined, should call next()",
      "src/jsx/utils.test.ts > styleObjectForEach > Should output the number as it is, when a number type is passed > $property",
      "src/jsx/utils.test.ts > styleObjectForEach > Should output with px suffix, when a number type is passed > $property",
      "src/middleware/body-limit/index.test.ts > Body Limit Middleware > POST request > ReadableStream body > should return 413 response",
      "src/middleware/cache/index.test.ts > Cache Middleware > Should correctly apply a single Vary header from middleware",
      "src/middleware/cache/index.test.ts > Cache Middleware > Should correctly apply and return a single Vary header with Accept specified by middleware",
      "src/middleware/cache/index.test.ts > Cache Middleware > Should deduplicate while merging multiple Vary headers from middleware and handler",
      "src/middleware/cache/index.test.ts > Cache Middleware > Should merge Vary headers from middleware and handler without duplicating",
      "src/middleware/cache/index.test.ts > Cache Middleware > Should merge Vary headers specified by middleware as a string with additional headers added by handler",
      "src/middleware/cache/index.test.ts > Cache Middleware > Should not allow \"*\" as a Vary header in middleware configuration due to its impact on caching effectiveness",
      "src/middleware/cache/index.test.ts > Cache Middleware > Should not be enabled if caches is not defined",
      "src/middleware/cache/index.test.ts > Cache Middleware > Should not return cached response",
      "src/middleware/cache/index.test.ts > Cache Middleware > Should not return duplicate header values",
      "src/middleware/cache/index.test.ts > Cache Middleware > Should prevent duplication of Vary headers when identical ones are set by both middleware and handler",
      "src/middleware/cache/index.test.ts > Cache Middleware > Should return cached response",
      "src/middleware/cache/index.test.ts > Cache Middleware > Should return composed handler header values",
      "src/middleware/cache/index.test.ts > Cache Middleware > Should return composed middleware header values",
      "src/middleware/cache/index.test.ts > Customizing Caching Keys > Should retrieve cached response with dynamic cache name and key",
      "src/middleware/cache/index.test.ts > Customizing Caching Keys > Should use dynamically generated cache key",
      "src/middleware/cache/index.test.ts > Customizing Caching Keys > Should use dynamically generated cache name",
      "src/middleware/combine/index.test.ts > every > Should call all middleware",
      "src/middleware/combine/index.test.ts > every > Should return the same response a middleware returns if it short-circuits the chain",
      "src/middleware/combine/index.test.ts > every > Should throw error if any middleware returns false",
      "src/middleware/combine/index.test.ts > every > Should throw error if any middleware throws an error",
      "src/middleware/combine/index.test.ts > except > Should call all middleware, except the one that matches some of the condition function",
      "src/middleware/combine/index.test.ts > except > Should call all middleware, except the one that matches some of the conditions",
      "src/middleware/combine/index.test.ts > except > Should call all middleware, except the one that matches the condition",
      "src/middleware/combine/index.test.ts > some > Should call only the first middleware",
      "src/middleware/combine/index.test.ts > some > Should not call skipped middleware even if an error is thrown",
      "src/middleware/combine/index.test.ts > some > Should not call skipped middleware even if an error is thrown with returning truthy value middleware",
      "src/middleware/combine/index.test.ts > some > Should try to call the second middleware if the first one returns false",
      "src/middleware/combine/index.test.ts > some > Should try to call the second middleware if the first one throws an error",
      "src/middleware/compress/index.test.ts > Compress Middleware > Compression Behavior > should compress large responses with deflate",
      "src/middleware/compress/index.test.ts > Compress Middleware > Compression Behavior > should compress large responses with gzip",
      "src/middleware/compress/index.test.ts > Compress Middleware > Compression Behavior > should prioritize gzip over deflate when both are accepted",
      "src/middleware/compress/index.test.ts > Compress Middleware > Compression Behavior > should remove Content-Length when compressing",
      "src/middleware/compress/index.test.ts > Compress Middleware > Edge Cases > should compress custom 404 Not Found responses",
      "src/middleware/compress/index.test.ts > Compress Middleware > JSON Handling > should compress large JSON responses",
      "src/middleware/compress/index.test.ts > Compress Middleware > Streaming Responses > should compress streaming responses written in multiple chunks",
      "src/middleware/language/index.test.ts > languageDetector > Debug Mode > should log debug information when enabled",
      "src/middleware/language/index.test.ts > languageDetector > Debug Mode > should log errors in debug mode",
      "src/middleware/language/index.test.ts > languageDetector > Error Handling > should fall back to default language on error",
      "src/middleware/logger/index.test.ts > Logger by Middleware in NO_COLOR > Log status 200 with big body",
      "src/middleware/logger/index.test.ts > Logger by Middleware in NO_COLOR > Log status 200 with empty body",
      "src/middleware/logger/index.test.ts > Logger by Middleware in NO_COLOR > Log status 200 with small body",
      "src/middleware/logger/index.test.ts > Logger by Middleware in NO_COLOR > Log status 404",
      "src/middleware/logger/index.test.ts > Logger by Middleware in NO_COLOR > Time in seconds",
      "src/middleware/logger/index.test.ts > ✗ ",
      "src/middleware/method-override/index.test.ts > Method Override Middleware > Header > Should override POST to DELETE",
      "src/middleware/method-override/index.test.ts > SIGTRAP",
      "src/middleware/request-id/index.test.ts > Request ID Middleware > Should return random request id",
      "src/middleware/serve-static/index.test.ts > code 1",
      "src/middleware/timing/index.test.ts > Server-Timing API > Should not be enabled if the main app has the timing middleware",
      "src/request.test.ts > Body methods with caching > req.parseBody() > Return type > specify return type explicitly",
      "src/request.test.ts > Body methods with caching > req.parseBody() > Return type > without options",
      "src/request.test.ts > Body methods with caching > req.parseBody() > Return type > {all: true, dot: true}",
      "src/request.test.ts > Body methods with caching > req.parseBody() > Return type > {all: true}",
      "src/request.test.ts > Body methods with caching > req.parseBody() > Return type > {dot: true}",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > ALL and Star > Should return /x and star",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > ALL star, ALL star, GET static, ALL star... > Should return wildcard, star2 and bar",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > All > GET, all hello",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Basic Usage > GET, post hello",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Capture Group > Complex capturing group > GET request",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Capture Group > Non-capturing group > GET /foo/bar",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Capture Group > Non-capturing group > GET /foo/baz",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Capture Group > Non-capturing group > GET /foo/qux",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Capture Group > Non-capturing group with prefix > GET /foo/bar",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Capture Group > Non-capturing group with prefix > GET /foo/baz",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Capture Group > Non-capturing group with prefix > GET /foo/qux",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Capture Group > Simple capturing group > GET /foo/bar",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Capture Group > Simple capturing group > GET /foo/baz",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Capture Group > Simple capturing group > GET /foo/qux",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Capture complex multiple directories > GET /part1/middle-b/end-c/latest",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Capture complex multiple directories > GET /part1/middle-b/latest",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Capture multiple directories and optional > GET /foo/bar/contents",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Capture multiple directories and optional > GET /foo/bar/contents/123",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Capture regex pattern has trailing wildcard > GET /foo/bar/file.html",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Capture simple multiple directories > GET /foo/bar/file.html",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Complex > /*",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Complex > Default",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Complex > Named Param",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Complex > Regexp",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Complex > Wildcard",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Duplicate param name > child",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Duplicate param name > parent",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Duplicate param name > self",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > GET star, ALL static, GET star... > Should return /x and star",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > GET star, GET static, ALL star... > Should return star1, star2, and bar",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Including slashes > GET /js/chunk/123.js",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Including slashes > GET /js/chunk/nest/123.js",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Including slashes > GET /js/main.js",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Multi match > Blog > DELETE /entry",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Multi match > Blog > GET /",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Multi match > Blog > GET /entry/123",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Multi match > Blog > GET /entry/123/comment/456",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Multi match > Blog > POST /entry",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Multi match > `params` per a handler > GET /entry/123/show",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Multi match > hierarchy",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Optional route > GET /api/animals",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Optional route > GET /api/animals/dog",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Optional route > GET /v1",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Optional route > GET /v1/123",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Optional route > GET /v1/123/abc",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > REST API > GET /users/hono",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > REST API > GET /users/hono/posts",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Registration order > handler -> fallback",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Registration order > middleware -> handler",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Reserved words > Reserved words and named parameter",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Reserved words > Reserved words and optional named parameter",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Reserved words > Reserved words and wildcard",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Routing with a hostname > GET /hello",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Routing with a hostname > GET www1.example.com/hello",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Routing with a hostname > GET www2.example.com/hello",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Same path > GET /hey",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Trailing slash > GET /book",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Trailing slash > GET /book/",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Unknown method > UNKNOWN_METHOD /",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > Unknown method > UNKNOWN_METHOD /all",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > long prefix, then star > ALL and GET > GET /",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > long prefix, then star > ALL and GET > GET /long/prefix",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > long prefix, then star > ALL and GET > GET /long/prefix/test",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > long prefix, then star > GET only > GET /",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > long prefix, then star > GET only > GET /long/prefix",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > long prefix, then star > GET only > GET /long/prefix/test",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > non ascii characters > GET /$/hono",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > non ascii characters > GET /()/hono",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > page > GET /page",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > star > Under a certain path",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > star > top",
      "src/router/linear-router/router.test.ts > LinearRouter > Common > static routes of ALL and GET > get /foo",
      "src/router/linear-router/router.test.ts > ✗ ",
      "src/router/pattern-router/router.test.ts > Pattern > Common > ALL and Star > Should return /x and star",
      "src/router/pattern-router/router.test.ts > Pattern > Common > ALL star, ALL star, GET static, ALL star... > Should return wildcard, star2 and bar",
      "src/router/pattern-router/router.test.ts > Pattern > Common > All > GET, all hello",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Basic Usage > GET, post hello",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Capture Group > Complex capturing group > GET request",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Capture Group > Non-capturing group > GET /foo/bar",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Capture Group > Non-capturing group > GET /foo/baz",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Capture Group > Non-capturing group > GET /foo/qux",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Capture Group > Non-capturing group with prefix > GET /foo/bar",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Capture Group > Non-capturing group with prefix > GET /foo/baz",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Capture Group > Non-capturing group with prefix > GET /foo/qux",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Capture Group > Simple capturing group > GET /foo/bar",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Capture Group > Simple capturing group > GET /foo/baz",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Capture Group > Simple capturing group > GET /foo/qux",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Capture complex multiple directories > GET /part1/middle-b/end-c/latest",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Capture complex multiple directories > GET /part1/middle-b/latest",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Capture multiple directories and optional > GET /foo/bar/contents",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Capture multiple directories and optional > GET /foo/bar/contents/123",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Capture regex pattern has trailing wildcard > GET /foo/bar/file.html",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Capture simple multiple directories > GET /foo/bar/file.html",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Complex > /*",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Complex > Default",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Complex > Named Param",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Complex > Regexp",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Complex > Wildcard",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Duplicate param name > child",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Duplicate param name > parent",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Duplicate param name > self",
      "src/router/pattern-router/router.test.ts > Pattern > Common > GET star, ALL static, GET star... > Should return /x and star",
      "src/router/pattern-router/router.test.ts > Pattern > Common > GET star, GET static, ALL star... > Should return star1, star2, and bar",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Including slashes > GET /js/chunk/123.js",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Including slashes > GET /js/chunk/nest/123.js",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Including slashes > GET /js/main.js",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Multi match > Blog > DELETE /entry",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Multi match > Blog > GET /",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Multi match > Blog > GET /entry/123",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Multi match > Blog > GET /entry/123/comment/456",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Multi match > Blog > POST /entry",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Multi match > `params` per a handler > GET /entry/123/show",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Multi match > hierarchy",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Optional route > GET /api/animals",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Optional route > GET /api/animals/dog",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Optional route > GET /v1",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Optional route > GET /v1/123",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Optional route > GET /v1/123/abc",
      "src/router/pattern-router/router.test.ts > Pattern > Common > REST API > GET /users/hono",
      "src/router/pattern-router/router.test.ts > Pattern > Common > REST API > GET /users/hono/posts",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Registration order > handler -> fallback",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Registration order > middleware -> handler",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Reserved words > Reserved words and named parameter",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Reserved words > Reserved words and optional named parameter",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Reserved words > Reserved words and wildcard",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Routing with a hostname > GET /hello",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Routing with a hostname > GET www1.example.com/hello",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Routing with a hostname > GET www2.example.com/hello",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Same path > GET /hey",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Trailing slash > GET /book",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Trailing slash > GET /book/",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Unknown method > UNKNOWN_METHOD /",
      "src/router/pattern-router/router.test.ts > Pattern > Common > Unknown method > UNKNOWN_METHOD /all",
      "src/router/pattern-router/router.test.ts > Pattern > Common > long prefix, then star > ALL and GET > GET /",
      "src/router/pattern-router/router.test.ts > Pattern > Common > long prefix, then star > ALL and GET > GET /long/prefix",
      "src/router/pattern-router/router.test.ts > Pattern > Common > long prefix, then star > ALL and GET > GET /long/prefix/test",
      "src/router/pattern-router/router.test.ts > Pattern > Common > long prefix, then star > GET only > GET /",
      "src/router/pattern-router/router.test.ts > Pattern > Common > long prefix, then star > GET only > GET /long/prefix",
      "src/router/pattern-router/router.test.ts > Pattern > Common > long prefix, then star > GET only > GET /long/prefix/test",
      "src/router/pattern-router/router.test.ts > Pattern > Common > non ascii characters > GET /$/hono",
      "src/router/pattern-router/router.test.ts > Pattern > Common > non ascii characters > GET /()/hono",
      "src/router/pattern-router/router.test.ts > Pattern > Common > page > GET /page",
      "src/router/pattern-router/router.test.ts > Pattern > Common > star > Under a certain path",
      "src/router/pattern-router/router.test.ts > Pattern > Common > star > top",
      "src/router/pattern-router/router.test.ts > Pattern > Common > static routes of ALL and GET > get /foo",
      "src/router/pattern-router/router.test.ts > ✗ ",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > ALL and Star > Should return /x and star",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > ALL star, ALL star, GET static, ALL star... > Should return wildcard, star2 and bar",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > All > GET, all hello",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Basic Usage > GET, post hello",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Capture Group > Complex capturing group > GET request",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Capture Group > Non-capturing group > GET /foo/bar",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Capture Group > Non-capturing group > GET /foo/baz",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Capture Group > Non-capturing group > GET /foo/qux",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Capture Group > Non-capturing group with prefix > GET /foo/bar",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Capture Group > Non-capturing group with prefix > GET /foo/baz",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Capture Group > Non-capturing group with prefix > GET /foo/qux",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Capture Group > Simple capturing group > GET /foo/bar",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Capture Group > Simple capturing group > GET /foo/baz",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Capture Group > Simple capturing group > GET /foo/qux",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Capture complex multiple directories > GET /part1/middle-b/end-c/latest",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Capture complex multiple directories > GET /part1/middle-b/latest",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Capture multiple directories and optional > GET /foo/bar/contents",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Capture multiple directories and optional > GET /foo/bar/contents/123",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Capture regex pattern has trailing wildcard > GET /foo/bar/file.html",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Capture simple multiple directories > GET /foo/bar/file.html",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Complex > /*",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Complex > Default",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Complex > Named Param",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Complex > Regexp",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Complex > Wildcard",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Duplicate param name > child",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Duplicate param name > parent",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Duplicate param name > self",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > GET star, ALL static, GET star... > Should return /x and star",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > GET star, GET static, ALL star... > Should return star1, star2, and bar",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Including slashes > GET /js/chunk/123.js",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Including slashes > GET /js/chunk/nest/123.js",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Including slashes > GET /js/main.js",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Multi match > Blog > DELETE /entry",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Multi match > Blog > GET /",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Multi match > Blog > GET /entry/123",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Multi match > Blog > GET /entry/123/comment/456",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Multi match > Blog > POST /entry",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Multi match > `params` per a handler > GET /entry/123/show",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Multi match > hierarchy",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Optional route > GET /api/animals",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Optional route > GET /api/animals/dog",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Optional route > GET /v1",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Optional route > GET /v1/123",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Optional route > GET /v1/123/abc",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > REST API > GET /users/hono",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > REST API > GET /users/hono/posts",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Registration order > handler -> fallback",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Registration order > middleware -> handler",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Reserved words > Reserved words and named parameter",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Reserved words > Reserved words and optional named parameter",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Reserved words > Reserved words and wildcard",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Routing with a hostname > GET /hello",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Routing with a hostname > GET www1.example.com/hello",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Routing with a hostname > GET www2.example.com/hello",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Same path > GET /hey",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Trailing slash > GET /book",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Trailing slash > GET /book/",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Unknown method > UNKNOWN_METHOD /",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > Unknown method > UNKNOWN_METHOD /all",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > long prefix, then star > ALL and GET > GET /",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > long prefix, then star > ALL and GET > GET /long/prefix",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > long prefix, then star > ALL and GET > GET /long/prefix/test",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > long prefix, then star > GET only > GET /",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > long prefix, then star > GET only > GET /long/prefix",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > long prefix, then star > GET only > GET /long/prefix/test",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > non ascii characters > GET /$/hono",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > non ascii characters > GET /()/hono",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > page > GET /page",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > star > Under a certain path",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > star > top",
      "src/router/reg-exp-router/router.test.ts > RegExpRouter > Common > static routes of ALL and GET > get /foo",
      "src/router/reg-exp-router/router.test.ts > ✗ ",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > ALL and Star > Should return /x and star",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > ALL star, ALL star, GET static, ALL star... > Should return wildcard, star2 and bar",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > All > GET, all hello",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Basic Usage > GET, post hello",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Capture Group > Complex capturing group > GET request",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Capture Group > Non-capturing group > GET /foo/bar",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Capture Group > Non-capturing group > GET /foo/baz",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Capture Group > Non-capturing group > GET /foo/qux",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Capture Group > Non-capturing group with prefix > GET /foo/bar",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Capture Group > Non-capturing group with prefix > GET /foo/baz",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Capture Group > Non-capturing group with prefix > GET /foo/qux",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Capture Group > Simple capturing group > GET /foo/bar",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Capture Group > Simple capturing group > GET /foo/baz",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Capture Group > Simple capturing group > GET /foo/qux",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Capture complex multiple directories > GET /part1/middle-b/end-c/latest",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Capture complex multiple directories > GET /part1/middle-b/latest",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Capture multiple directories and optional > GET /foo/bar/contents",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Capture multiple directories and optional > GET /foo/bar/contents/123",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Capture regex pattern has trailing wildcard > GET /foo/bar/file.html",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Capture simple multiple directories > GET /foo/bar/file.html",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Complex > /*",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Complex > Default",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Complex > Named Param",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Complex > Regexp",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Complex > Wildcard",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Duplicate param name > child",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Duplicate param name > parent",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Duplicate param name > self",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > GET star, ALL static, GET star... > Should return /x and star",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > GET star, GET static, ALL star... > Should return star1, star2, and bar",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Including slashes > GET /js/chunk/123.js",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Including slashes > GET /js/chunk/nest/123.js",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Including slashes > GET /js/main.js",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Multi match > Blog > DELETE /entry",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Multi match > Blog > GET /",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Multi match > Blog > GET /entry/123",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Multi match > Blog > GET /entry/123/comment/456",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Multi match > Blog > POST /entry",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Multi match > `params` per a handler > GET /entry/123/show",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Multi match > hierarchy",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Optional route > GET /api/animals",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Optional route > GET /api/animals/dog",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Optional route > GET /v1",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Optional route > GET /v1/123",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Optional route > GET /v1/123/abc",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > REST API > GET /users/hono",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > REST API > GET /users/hono/posts",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Registration order > handler -> fallback",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Registration order > middleware -> handler",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Reserved words > Reserved words and named parameter",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Reserved words > Reserved words and optional named parameter",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Reserved words > Reserved words and wildcard",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Routing with a hostname > GET /hello",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Routing with a hostname > GET www1.example.com/hello",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Routing with a hostname > GET www2.example.com/hello",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Same path > GET /hey",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Trailing slash > GET /book",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Trailing slash > GET /book/",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Unknown method > UNKNOWN_METHOD /",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > Unknown method > UNKNOWN_METHOD /all",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > long prefix, then star > ALL and GET > GET /",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > long prefix, then star > ALL and GET > GET /long/prefix",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > long prefix, then star > ALL and GET > GET /long/prefix/test",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > long prefix, then star > GET only > GET /",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > long prefix, then star > GET only > GET /long/prefix",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > long prefix, then star > GET only > GET /long/prefix/test",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > non ascii characters > GET /$/hono",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > non ascii characters > GET /()/hono",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > page > GET /page",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > star > Under a certain path",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > star > top",
      "src/router/smart-router/router.test.ts > SmartRouter > Common > static routes of ALL and GET > get /foo",
      "src/router/smart-router/router.test.ts > ✗ ",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > ALL and Star > Should return /x and star",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > ALL star, ALL star, GET static, ALL star... > Should return wildcard, star2 and bar",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > All > GET, all hello",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Basic Usage > GET, post hello",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Capture Group > Complex capturing group > GET request",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Capture Group > Non-capturing group > GET /foo/bar",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Capture Group > Non-capturing group > GET /foo/baz",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Capture Group > Non-capturing group > GET /foo/qux",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Capture Group > Non-capturing group with prefix > GET /foo/bar",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Capture Group > Non-capturing group with prefix > GET /foo/baz",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Capture Group > Non-capturing group with prefix > GET /foo/qux",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Capture Group > Simple capturing group > GET /foo/bar",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Capture Group > Simple capturing group > GET /foo/baz",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Capture Group > Simple capturing group > GET /foo/qux",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Capture complex multiple directories > GET /part1/middle-b/end-c/latest",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Capture complex multiple directories > GET /part1/middle-b/latest",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Capture multiple directories and optional > GET /foo/bar/contents",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Capture multiple directories and optional > GET /foo/bar/contents/123",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Capture regex pattern has trailing wildcard > GET /foo/bar/file.html",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Capture simple multiple directories > GET /foo/bar/file.html",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Complex > /*",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Complex > Default",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Complex > Named Param",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Complex > Regexp",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Complex > Wildcard",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Duplicate param name > child",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Duplicate param name > parent",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Duplicate param name > self",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > GET star, ALL static, GET star... > Should return /x and star",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > GET star, GET static, ALL star... > Should return star1, star2, and bar",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Including slashes > GET /js/chunk/123.js",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Including slashes > GET /js/chunk/nest/123.js",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Including slashes > GET /js/main.js",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Multi match > Blog > DELETE /entry",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Multi match > Blog > GET /",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Multi match > Blog > GET /entry/123",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Multi match > Blog > GET /entry/123/comment/456",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Multi match > Blog > POST /entry",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Multi match > `params` per a handler > GET /entry/123/show",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Multi match > hierarchy",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Optional route > GET /api/animals",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Optional route > GET /api/animals/dog",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Optional route > GET /v1",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Optional route > GET /v1/123",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Optional route > GET /v1/123/abc",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > REST API > GET /users/hono",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > REST API > GET /users/hono/posts",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Registration order > handler -> fallback",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Registration order > middleware -> handler",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Reserved words > Reserved words and named parameter",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Reserved words > Reserved words and optional named parameter",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Reserved words > Reserved words and wildcard",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Routing with a hostname > GET /hello",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Routing with a hostname > GET www1.example.com/hello",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Routing with a hostname > GET www2.example.com/hello",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Same path > GET /hey",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Trailing slash > GET /book",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Trailing slash > GET /book/",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Unknown method > UNKNOWN_METHOD /",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > Unknown method > UNKNOWN_METHOD /all",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > long prefix, then star > ALL and GET > GET /",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > long prefix, then star > ALL and GET > GET /long/prefix",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > long prefix, then star > ALL and GET > GET /long/prefix/test",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > long prefix, then star > GET only > GET /",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > long prefix, then star > GET only > GET /long/prefix",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > long prefix, then star > GET only > GET /long/prefix/test",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > non ascii characters > GET /$/hono",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > non ascii characters > GET /()/hono",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > page > GET /page",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > star > Under a certain path",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > star > top",
      "src/router/trie-router/router.test.ts > TrieRouter > Common > static routes of ALL and GET > get /foo",
      "src/router/trie-router/router.test.ts > ✗ ",
      "src/utils/body.test.ts > BodyData > without options",
      "src/utils/body.test.ts > BodyData > {all: boolean, dot: boolean}",
      "src/utils/body.test.ts > BodyData > {all: boolean}",
      "src/utils/body.test.ts > BodyData > {all: true, dot: true}",
      "src/utils/body.test.ts > BodyData > {all: true}",
      "src/utils/body.test.ts > BodyData > {dot: boolean}",
      "src/utils/body.test.ts > BodyData > {dot: true}",
      "src/utils/body.test.ts > Parse Body Util > Return type > specify return type explicitly",
      "src/utils/body.test.ts > Parse Body Util > Return type > without options",
      "src/utils/body.test.ts > Parse Body Util > Return type > {all: boolean, dot: boolean}",
      "src/utils/body.test.ts > Parse Body Util > Return type > {all: boolean}",
      "src/utils/body.test.ts > Parse Body Util > Return type > {all: true, dot: true}",
      "src/utils/body.test.ts > Parse Body Util > Return type > {all: true}",
      "src/utils/body.test.ts > Parse Body Util > Return type > {dot: boolean}",
      "src/utils/body.test.ts > Parse Body Util > Return type > {dot: true}",
      "src/utils/body.test.ts > Parse Body Util > should not update file object properties",
      "src/utils/color.test.ts > ✗ ",
      "src/utils/concurrent.test.ts > concurrent execution > concurrency $concurrency, count $count",
      "src/utils/ipaddr.test.ts > convertIPv4ToString > convertIPv4ToString($input) === $expected",
      "src/utils/ipaddr.test.ts > convertIPv6ToString > convertIPv6ToString($input) === $expected",
      "src/utils/stream.test.ts > StreamingApi > abort()",
      "src/utils/stream.test.ts > StreamingApi > onAbort()",
      "src/utils/types.test.ts > JSONParsed > Set/Map > should convert Map to empty object",
      "src/utils/types.test.ts > JSONParsed > Set/Map > should convert Set to empty object",
      "src/utils/types.test.ts > JSONParsed > Should parse a complex interface",
      "src/utils/types.test.ts > JSONParsed > Should parse a complex type",
      "src/utils/types.test.ts > JSONParsed > array > should convert (T | undefined)[] type to JSONParsedT | null>[]",
      "src/utils/types.test.ts > JSONParsed > array > should convert Function[] type to null[]",
      "src/utils/types.test.ts > JSONParsed > array > should convert symbol[] type to null[]",
      "src/utils/types.test.ts > JSONParsed > array > should convert undefined[] type to null[]",
      "src/utils/types.test.ts > JSONParsed > array > should convert { key: readonly T[]} correctly",
      "src/utils/types.test.ts > JSONParsed > invalid types > should convert function type to never",
      "src/utils/types.test.ts > JSONParsed > invalid types > should convert symbol type to never",
      "src/utils/types.test.ts > JSONParsed > invalid types > should convert undefined type to never",
      "src/utils/types.test.ts > JSONParsed > object > should convert T | undefined to T | undefined",
      "src/utils/types.test.ts > JSONParsed > object > should omit keys with function value",
      "src/utils/types.test.ts > JSONParsed > object > should omit keys with invalid union",
      "src/utils/types.test.ts > JSONParsed > object > should omit keys with symbol value",
      "src/utils/types.test.ts > JSONParsed > object > should omit keys with undefined value",
      "src/utils/types.test.ts > JSONParsed > object > should omit symbol keys",
      "src/utils/types.test.ts > JSONParsed > primitives > should convert boolean type to boolean",
      "src/utils/types.test.ts > JSONParsed > primitives > should convert null type to null",
      "src/utils/types.test.ts > JSONParsed > primitives > should convert number type to number",
      "src/utils/types.test.ts > JSONParsed > primitives > should convert string type to string",
      "src/utils/types.test.ts > JSONParsed > toJSON > should convert { a: { toJSON() => T } } to { a: T }",
      "src/utils/types.test.ts > JSONParsed > toJSON > should convert { toJSON() => T } to T",
      "src/utils/types.test.ts > JSONParsed > toJSON > toJSON is not called recursively",
      "src/utils/types.test.ts > JSONParsed > tuple > should convert [T, S] type to [T, S]",
      "src/utils/types.test.ts > JSONParsed > tuple > should convert [T, undefined] type to [T, null]",
      "src/utils/url.test.ts > url > getPattern > regex pattern with next",
      "src/validator/validator.test.ts > Validator with using Zod directly > Should exclude Response & TypedResponse type"
    ]
  }
]